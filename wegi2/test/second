STRFTIME(3)                                                  Linux Programmer's Manual                                                 STRFTIME(3)

NNAAMMEE
       strftime - format date and time

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ttiimmee..hh>>

       ssiizzee__tt ssttrrffttiimmee((cchhaarr **_s,, ssiizzee__tt _m_a_x,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,,
                       ccoonnsstt ssttrruucctt ttmm **_t_m));;

DDEESSCCRRIIPPTTIIOONN
       The ssttrrffttiimmee() function formats the broken-down time _t_m according to the format specification _f_o_r_m_a_t and places the result in the character
       array _s of size _m_a_x.

       The format specification is a null-terminated string and may contain special character sequences called _c_o_n_v_e_r_s_i_o_n _s_p_e_c_i_f_i_c_a_t_i_o_n_s, each  of
       which is introduced by a '%' character and terminated by some other character known as a _c_o_n_v_e_r_s_i_o_n _s_p_e_c_i_f_i_e_r _c_h_a_r_a_c_t_e_r.  All other charac‐
       ter sequences are _o_r_d_i_n_a_r_y _c_h_a_r_a_c_t_e_r _s_e_q_u_e_n_c_e_s.

       The characters of ordinary character sequences (including the null byte) are copied verbatim from _f_o_r_m_a_t to _s.  However, the characters  of
       conversion specifications are replaced as follows:

       %%aa     The abbreviated name of the day of the week according to the current locale.

       %%AA     The full name of the day of the week according to the current locale.

       %%bb     The abbreviated month name according to the current locale.

       %%BB     The full month name according to the current locale.

       %%cc     The preferred date and time representation for the current locale.

       %%CC     The century number (year/100) as a 2-digit integer. (SU)

       %%dd     The day of the month as a decimal number (range 01 to 31).

       %%DD     Equivalent  to %%mm//%%dd//%%yy.  (Yecch—for Americans only.  Americans should note that in other countries %%dd//%%mm//%%yy is rather common.  This
              means that in international context this format is ambiguous and should not be used.) (SU)

       %%ee     Like %%dd, the day of the month as a decimal number, but a leading zero is replaced by a space. (SU)

       %%EE     Modifier: use alternative format, see below. (SU)

       %%FF     Equivalent to %%YY--%%mm--%%dd (the ISO 8601 date format). (C99)

       %%GG     The ISO 8601 week-based year (see NOTES) with century as a decimal number.  The 4-digit year corresponding to the  ISO  week  number
              (see  %%VV).   This has the same format and value as %%YY, except that if the ISO week number belongs to the previous or next year, that
              year is used instead. (TZ)

       %%gg     Like %%GG, but without century, that is, with a 2-digit year (00-99). (TZ)

       %%hh     Equivalent to %%bb.  (SU)

       %%HH     The hour as a decimal number using a 24-hour clock (range 00 to 23).

       %%II     The hour as a decimal number using a 12-hour clock (range 01 to 12).

       %%jj     The day of the year as a decimal number (range 001 to 366).

       %%kk     The hour (24-hour clock) as a decimal number (range 0 to 23); single digits are preceded by a blank.  (See also %%HH.)  (TZ)

       %%ll     The hour (12-hour clock) as a decimal number (range 1 to 12); single digits are preceded by a blank.  (See also %%II.)  (TZ)

       %%mm     The month as a decimal number (range 01 to 12).

       %%MM     The minute as a decimal number (range 00 to 59).

       %%nn     A newline character. (SU)

       %%OO     Modifier: use alternative format, see below. (SU)

       %%pp     Either "AM" or "PM" according to the given time value, or the corresponding strings for the current locale.  Noon is treated as "PM"
              and midnight as "AM".

       %%PP     Like %%pp but in lowercase: "am" or "pm" or a corresponding string for the current locale. (GNU)

       %%rr     The time in a.m. or p.m. notation.  In the POSIX locale this is equivalent to %%II::%%MM::%%SS %%pp.  (SU)

       %%RR     The time in 24-hour notation (%%HH::%%MM).  (SU) For a version including the seconds, see %%TT below.

       %%ss     The number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC). (TZ)

       %%SS     The second as a decimal number (range 00 to 60).  (The range is up to 60 to allow for occasional leap seconds.)

       %%tt     A tab character. (SU)

       %%TT     The time in 24-hour notation (%%HH::%%MM::%%SS).  (SU)

       %%uu     The day of the week as a decimal, range 1 to 7, Monday being 1.  See also %%ww.  (SU)

       %%UU     The week number of the current year as a decimal number, range 00 to 53, starting with the first Sunday as the first day of week 01.
              See also %%VV and %%WW.

       %%VV     The ISO 8601 week number (see NOTES) of the current year as a decimal number, range 01 to 53, where week 1 is the  first  week  that
              has at least 4 days in the new year.  See also %%UU and %%WW.  (SU)

       %%ww     The day of the week as a decimal, range 0 to 6, Sunday being 0.  See also %%uu.

       %%WW     The week number of the current year as a decimal number, range 00 to 53, starting with the first Monday as the first day of week 01.

       %%xx     The preferred date representation for the current locale without the time.

       %%XX     The preferred time representation for the current locale without the date.

       %%yy     The year as a decimal number without a century (range 00 to 99).

       %%YY     The year as a decimal number including the century.

       %%zz     The _+_h_h_m_m or _-_h_h_m_m numeric timezone (that is, the hour and minute offset from UTC). (SU)

       %%ZZ     The timezone name or abbreviation.

       %%++     The date and time in ddaattee(1) format. (TZ) (Not supported in glibc2.)

       %%%%     A literal '%' character.

       Some  conversion  specifications can be modified by preceding the conversion specifier character by the EE or OO _m_o_d_i_f_i_e_r to indicate that an
       alternative format should be used.  If the alternative format or specification does not exist for the current locale, the behavior will  be
       as  if  the  unmodified  conversion specification were used. (SU) The Single UNIX Specification mentions %%EEcc, %%EECC, %%EExx, %%EEXX, %%EEyy, %%EEYY, %%OOdd,
       %%OOee, %%OOHH, %%OOII, %%OOmm, %%OOMM, %%OOSS, %%OOuu, %%OOUU, %%OOVV, %%OOww, %%OOWW, %%OOyy, where the effect of the OO modifier is to use alternative numeric symbols  (say,
       roman numerals), and that of the E modifier is to use a locale-dependent alternative representation.

       The broken-down time structure _t_m is defined in _<_t_i_m_e_._h_>.  See also ccttiimmee(3).

RREETTUURRNN VVAALLUUEE
       Provided  that  the  result  string, including the terminating null byte, does not exceed _m_a_x bytes, ssttrrffttiimmee() returns the number of bytes
       (excluding the terminating null byte) placed in the array _s.  If the length of the result string  (including  the  terminating  null  byte)
       would exceed _m_a_x bytes, then ssttrrffttiimmee() returns 0, and the contents of the array are undefined.

       Note  that  the  return  value 0 does not necessarily indicate an error.  For example, in many locales %%pp yields an empty string.  An empty
       _f_o_r_m_a_t string will likewise yield an empty string.

EENNVVIIRROONNMMEENNTT
       The environment variables TTZZ and LLCC__TTIIMMEE are used.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌───────────┬───────────────┬────────────────────┐
       │IInntteerrffaaccee  │ AAttttrriibbuuttee     │ VVaalluuee              │
       ├───────────┼───────────────┼────────────────────┤
       │ssttrrffttiimmee() │ Thread safety │ MT-Safe env locale │
       └───────────┴───────────────┴────────────────────┘
CCOONNFFOORRMMIINNGG TTOO
       SVr4, C89, C99.  There are strict inclusions between the set of conversions given in ANSI C (unmarked), those  given  in  the  Single  UNIX
       Specification  (marked  SU),  those given in Olson's timezone package (marked TZ), and those given in glibc (marked GNU), except that %%++ is
       not supported in glibc2.  On the other hand glibc2 has several more extensions.  POSIX.1 only refers to ANSI  C;  POSIX.2  describes  under
       ddaattee(1) several extensions that could apply to ssttrrffttiimmee() as well.  The %%FF conversion is in C99 and POSIX.1-2001.

       In  SUSv2,  the  %%SS specifier allowed a range of 00 to 61, to allow for the theoretical possibility of a minute that included a double leap
       second (there never has been such a minute).

NNOOTTEESS
   IISSOO 88660011 wweeeekk ddaatteess
       %%GG, %%gg, and %%VV yield values calculated from the week-based year defined by the ISO 8601 standard.  In this system, weeks start on a Monday,
       and  are  numbered  from  01, for the first week, up to 52 or 53, for the last week.  Week 1 is the first week where four or more days fall
       within the new year (or, synonymously, week 01 is: the first week of the year that contains a Thursday; or, the week that has 4 January  in
       it).  When three of fewer days of the first calendar week of the new year fall within that year, then the ISO 8601 week-based system counts
       those days as part of week 53 of the preceding year.  For example, 1 January 2010 is a Friday, meaning that just three days of that  calen‐
       dar week fall in 2010.  Thus, the ISO 8601 week-based system considers these days to be part of week 53 (%%VV) of the year 2009 (%%GG); week 01
       of ISO 8601 year 2010 starts on Monday, 4 January 2010.

   GGlliibbcc nnootteess
       Glibc provides some extensions for conversion specifications.  (These extensions are not specified in POSIX.1-2001, but a few other systems
       provide similar features.)  Between the '%' character and the conversion specifier character, an optional _f_l_a_g and field _w_i_d_t_h may be spec‐
       ified.  (These precede the EE or OO modifiers, if present.)

       The following flag characters are permitted:

       __      (underscore) Pad a numeric result string with spaces.

       --      (dash) Do not pad a numeric result string.

       00      Pad a numeric result string with zeros even if the conversion specifier character uses space-padding by default.

       ^^      Convert alphabetic characters in result string to uppercase.

       ##      Swap the case of the result string.  (This flag works only with certain conversion specifier characters, and of these,  it  is  only
              really useful with %%ZZ.)

       An  optional  decimal  width specifier may follow the (possibly absent) flag.  If the natural size of the field is smaller than this width,
       then the result string is padded (on the left) to the specified width.

BBUUGGSS
       If the output string would exceed _m_a_x bytes, _e_r_r_n_o is _n_o_t set.  This makes it impossible to distinguish this error case  from  cases  where
       the _f_o_r_m_a_t string legitimately produces a zero-length output string.  POSIX.1-2001 does _n_o_t specify any _e_r_r_n_o settings for ssttrrffttiimmee().

       Some  buggy  versions  of  ggcccc(1) complain about the use of %%cc: _w_a_r_n_i_n_g_: _`_%_c_' _y_i_e_l_d_s _o_n_l_y _l_a_s_t _2 _d_i_g_i_t_s _o_f _y_e_a_r _i_n _s_o_m_e _l_o_c_a_l_e_s.  Of course
       programmers are encouraged to use %%cc, it gives the preferred date and time representation.  One meets all kinds of strange obfuscations  to
       circumvent this ggcccc(1) problem.  A relatively clean one is to add an intermediate function

           size_t
           my_strftime(char *s, size_t max, const char *fmt,
                       const struct tm *tm)
           {
               return strftime(s, max, fmt, tm);
           }

       Nowadays, ggcccc(1) provides the _-_W_n_o_-_f_o_r_m_a_t_-_y_2_k option to prevent the warning, so that the above workaround is no longer required.

EEXXAAMMPPLLEE
       RRFFCC 22882222--ccoommpplliiaanntt ddaattee ffoorrmmaatt (with an English locale for %a and %b)

         "%a, %d %b %Y %T %z"

       RRFFCC 882222--ccoommpplliiaanntt ddaattee ffoorrmmaatt (with an English locale for %a and %b)

         "%a, %d %b %y %T %z"

   EExxaammppllee pprrooggrraamm
       The program below can be used to experiment with ssttrrffttiimmee().

       Some examples of the result string produced by the glibc implementation of ssttrrffttiimmee() are as follows:

           $ ..//aa..oouutt ''%%mm''
           Result string is "11"
           $ ..//aa..oouutt ''%%55mm''
           Result string is "00011"
           $ ..//aa..oouutt ''%%__55mm''
           Result string is "   11"

   PPrrooggrraamm ssoouurrccee
       #include <time.h>
       #include <stdio.h>
       #include <stdlib.h>

       int
       main(int argc, char *argv[])
       {
           char outstr[200];
           time_t t;
           struct tm *tmp;

           t = time(NULL);
           tmp = localtime(&t);
           if (tmp == NULL) {
               perror("localtime");
               exit(EXIT_FAILURE);
           }

           if (strftime(outstr, sizeof(outstr), argv[1], tmp) == 0) {
               fprintf(stderr, "strftime returned 0");
               exit(EXIT_FAILURE);
           }

           printf("Result string is \"%s\"\n", outstr);
           exit(EXIT_SUCCESS);
       }

SSEEEE AALLSSOO
       ddaattee(1), ttiimmee(2), ccttiimmee(3), sseettllooccaallee(3), sspprriinnttff(3), ssttrrppttiimmee(3)

CCOOLLOOPPHHOONN
       This  page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the
       latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

GNU                                                                 2015-03-02                                                         STRFTIME(3)
