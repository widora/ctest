/*-------------------------------------------------------
A simple example to log on and keep alive with BIGIOT

Midas Zhou
--------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <time.h>

#define BUFSIZE 2048

int sockfd;
char *strjson_checkin= "{\"M\":\"checkin\",\"ID\":421, \"K\":\"f80ea043e\"}\n";
char *strjson_keepalive= "{\"M\":\"beat\"}\n";

void bigiot_keepalive(void)
{
	int ret;
	int i;
	time_t t;
	struct tm *tm;

	while(1)
	{
		/* idle time */
		for(i=0;i<150;i++)
			usleep(100000);

		/* send heart_beat msg */
		ret=send(sockfd, strjson_keepalive, strlen(strjson_keepalive), MSG_CONFIRM);
		if(ret<0) {
			printf("Fail to send keepalive msg to BIGIOT!\n");
			perror("send keepalive msg to BIGIOT.");
		}
		else {
		        /* get time stamp */
        		t=time(NULL);
        		tm=localtime(&t);
        		/* time stamp and msg */
        		printf("[%d-%02d-%02d %02d:%02d:%02d] ",
                                tm->tm_year+1900,tm->tm_mon+1,tm->tm_mday,tm->tm_hour, tm->tm_min,tm->tm_sec );
			printf("Keepalive msg has been sent to BIGIOT.\n");
		}
	}
}


int main(int argc, char *argv[])
{
	int ret;
	char buf[BUFSIZE]={0};
	struct sockaddr_in svr_addr;

	pthread_t  	pthd_keepalive;

	/* screate a socket file descriptor */
	while( (sockfd=socket(AF_INET,SOCK_STREAM,0)) <0 )
	{
		perror("try to create socket file descriptor");

	}
	printf("Succeed to create a socket file descriptor!\n");

	/* set server address */
	svr_addr.sin_family=AF_INET;
	svr_addr.sin_port=htons(8181);
	svr_addr.sin_addr.s_addr=inet_addr("121.42.180.30"); //www.bigiot.net");
	bzero(&(svr_addr.sin_zero),8);

	/* try to connect to BIGIOT. */
	while( connect(sockfd,(struct sockaddr *)&svr_addr, sizeof(struct sockaddr)) <0 )
	{
		perror("connect to server");
	}

	/* print message from the server */
	printf("Succeed to connect to BIGIOT!");
	ret=recv(sockfd, buf, BUFSIZE, 0);
	buf[ret]='\0';
	printf("Reply from the server: %s\n",buf);

	/* set JSON for checkin to BIGIO */
	ret=send(sockfd, strjson_checkin, strlen(strjson_checkin), MSG_CONFIRM);
	if(ret<0)
	{
		printf("Fail to send msg to BIGIOT!\n");
		perror("send message to BIGIOT.");
	}
	else
	{
		printf("%d bytes of totally %d bytes message has been sent to BIGIOT..\n",
									ret, strlen(strjson_checkin));
	}

	/* launch keepalive thread, BIGIOT */
	if( pthread_create(&pthd_keepalive, NULL, (void *)bigiot_keepalive, NULL) !=0 )
        {
                printf("Fail to create bigiot_keepalive thread!\n");
                goto fail;
        }
	else
		printf("Create bigiot_keepavlie thread successfully!\n");

	/* get reply from the server */
	ret=recv(sockfd, buf, BUFSIZE, 0);
	buf[ret]='\0';
	printf("Reply from the server: %s\n",buf);

	while(1)
	{
	   	if( (ret=recv(sockfd,buf,BUFSIZE,0)) >0 )
		{
			buf[ret]='\0';
			printf("Message from the server: %s\n",buf);
		}
		usleep(100000);
	}


	/* joint threads */
	pthread_join(pthd_keepalive,NULL);

fail:
	/* clear jobs */
	close(sockfd);
	return 0;

}
